//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infrastructure.Services.PatientManagerServices.CommandProcessorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.PatientManagerServices.CommandProcessorService.PatientManagerCommandProc" +
        "essor")]
    public interface PatientManagerCommandProcessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PatientManagerCommandProcessor/Submit", ReplyAction="http://tempuri.org/PatientManagerCommandProcessor/SubmitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ValueObjects.Wcf.MyValidator), Action="http://tempuri.org/PatientManagerCommandProcessor/SubmitMyValidatorFault", Name="MyValidator", Namespace="http://schemas.datacontract.org/2004/07/ValueObjects.Wcf")]
        [System.ServiceModel.FaultContractAttribute(typeof(ValueObjects.Wcf.MyConcurrencyIndicator), Action="http://tempuri.org/PatientManagerCommandProcessor/SubmitMyConcurrencyIndicatorFau" +
            "lt", Name="MyConcurrencyIndicator", Namespace="http://schemas.datacontract.org/2004/07/ValueObjects.Wcf")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.FindPatientsBySearchTextQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetAllPatientsQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetAllPatientVisitsQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetContactInfoByPatientQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetHealthIdByPatientQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetPatientVisitByIdQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetPatientByIdQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Queries.GetPatientVisitsByPatientQuery))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.ContactInfoChangedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.HealthcardChangedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.NewPatientRegisteredEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.PatientIdentityChangedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.PatientRemovedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.PatientVisitChangedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.PatientVisitedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Events.PatientVisitRemovedEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Dto.ContactInfoDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Dto.HealthIdentificationDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Dto.PatientDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Dto.PatientVisitDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.ContactInformation.Address))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.ContactInformation.PhoneNumber))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Health.Healthcard))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Health.GenderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.AddPatientCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.MessageNotifyOnCompletion))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.AddPatientVisitCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.DeletePatientCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.DeletePatientVisitCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.MessageCompletedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.UpdateContactInformationCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.UpdatePatientCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.UpdatePatientVisitCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PatientManager.Contract.Commands.UpdateHealthIdCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.EventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Wcf.MyValidator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Wcf.MyValidationFailure[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Wcf.MyValidationFailure))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ValueObjects.Wcf.MyConcurrencyIndicator))]
        void Submit(object command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PatientManagerCommandProcessor/Submit", ReplyAction="http://tempuri.org/PatientManagerCommandProcessor/SubmitResponse")]
        System.Threading.Tasks.Task SubmitAsync(object command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PatientManagerCommandProcessorChannel : Infrastructure.Services.PatientManagerServices.CommandProcessorService.PatientManagerCommandProcessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientManagerCommandProcessorClient : System.ServiceModel.ClientBase<Infrastructure.Services.PatientManagerServices.CommandProcessorService.PatientManagerCommandProcessor>, Infrastructure.Services.PatientManagerServices.CommandProcessorService.PatientManagerCommandProcessor {
        
        public PatientManagerCommandProcessorClient() {
        }
        
        public PatientManagerCommandProcessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientManagerCommandProcessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientManagerCommandProcessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientManagerCommandProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Submit(object command) {
            base.Channel.Submit(command);
        }
        
        public System.Threading.Tasks.Task SubmitAsync(object command) {
            return base.Channel.SubmitAsync(command);
        }
    }
}
